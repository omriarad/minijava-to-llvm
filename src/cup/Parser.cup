/*************/
/* Based on a template by Oren Ish-Shalom */
/*************/


/*************/
/* IMPORTS */
/*************/

import java_cup.runtime.*;
import ast.*;
import java.util.List;
import java.util.LinkedList;

parser code
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}

	// Override default error reporting in parser
	public void report_error(String message, Object info)
	{
		System.err.print("Syntax error at line " + lexer.getLine() + " of input. Parser\n");
		System.exit(1);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	try {
		s = lexer.next_token();
		return s;
	} catch (java.lang.Error e) {
		System.err.print("Syntax error at line " + lexer.getLine() + " of input. Lexer\n");
		System.exit(1);
		return null;
	}
:};

/*************/
/* TERMINALS */
/*************/
/* Classes */
terminal PUBLIC, CLASS, EXTENDS, RETURN;
terminal STATIC, VOID, MAIN, STRING; // Main terminals
/* Statements */
terminal IF, ELSE, WHILE, PRINT;
/* Primitives */
terminal INT, BOOLEAN;
/* Objects */
terminal NEW, THIS;
/* Unary expressions */
terminal NOT;
/* Binary expressions */
terminal PLUS, MINUS, MULT, AND, LESSTHAN, EQUAL;
/* Parentheses & delimiters */
terminal LPAREN, RPAREN, LBRACKET, RBRACKET, LBRACE, RBRACE;
terminal COMMA, DOT, SEMICOLON;
/* Arrays */
terminal LENGTH;
/* Literals */
terminal TRUE, FALSE;
terminal Integer INTEGER_LITERAL;
terminal String IDENTIFIER;

/*****************/
/* NON TERMINALS */
/*****************/
/* Ast class definitions */
non terminal Program prog;
non terminal MainClass mainClass;
non terminal ClassDecl classDecl;
non terminal VarDecl varDecl;
non terminal MethodDecl methodDecl;
non terminal FormalArg commaFormalArg;
non terminal Statement statement;
non terminal Expr expr;

/* Ast class lists definitions */
non terminal LinkedList<ClassDecl> classDecls;
non terminal LinkedList<VarDecl> varDecls;
non terminal LinkedList<MethodDecl> methodDecls;
non terminal LinkedList<Statement> statements;
non terminal LinkedList<FormalArg> formalArgs;
non terminal LinkedList<FormalArg> commaFormalArgs;
non terminal LinkedList<Expr> actuals;
non terminal LinkedList<Expr> commaActuals;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence right EQUAL;
precedence left AND;
precedence right NOT;
precedence left LESSTHAN;
precedence left PLUS, MINUS;
precedence left MULT;
precedence left LBRACKET, RBRACKET;
precedence left DOT;

/************************/
/* INITIAL NON TERMINAL */
/************************/
start with prog;

/********************/
/* PRODUCTION RULES */
/********************/

prog ::= mainClass:main classDecls:cs
			{: RESULT = new Program(main, cs); :}
;

mainClass ::= CLASS IDENTIFIER:id LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENTIFIER:arg RPAREN LBRACE statement:s RBRACE RBRACE
			{: RESULT = new MainClass(id, arg, s); :}
;

classDecl ::= CLASS IDENTIFIER:name LBRACE varDecls:vars methodDecls:methods RBRACE
			{: RESULT = new ClassDecl(name, null, vars, methods); :}
		| CLASS IDENTIFIER:name EXTENDS IDENTIFIER:sup LBRACE varDecls:vars methodDecls:methods RBRACE
			{: RESULT = new ClassDecl(name, sup, vars, methods); :}
;

methodDecl ::= PUBLIC INT LBRACKET RBRACKET IDENTIFIER:name LPAREN formalArgs:f RPAREN LBRACE varDecls:v statements:s RETURN expr:e SEMICOLON RBRACE
			{: RESULT = new MethodDecl(new IntArrayAstType(), name, f, v, s, e, nameleft); :}
		| PUBLIC BOOLEAN IDENTIFIER:name LPAREN formalArgs:f RPAREN LBRACE varDecls:v statements:s RETURN expr:e SEMICOLON RBRACE
			{: RESULT = new MethodDecl(new BoolAstType(), name, f, v, s, e, nameleft); :}
		| PUBLIC INT IDENTIFIER:name LPAREN formalArgs:f RPAREN LBRACE varDecls:v statements:s RETURN expr:e SEMICOLON RBRACE
			{: RESULT = new MethodDecl(new IntAstType(), name, f, v, s, e, nameleft); :}
		| PUBLIC IDENTIFIER:type IDENTIFIER:name LPAREN formalArgs:f RPAREN LBRACE varDecls:v statements:s RETURN expr:e SEMICOLON RBRACE
			{: RESULT = new MethodDecl(new RefType(type), name, f, v, s, e, nameleft); :}
;

commaFormalArg ::= COMMA INT LBRACKET RBRACKET IDENTIFIER:name	{: RESULT = new FormalArg(new IntArrayAstType(), name, nameleft);:}
		| COMMA BOOLEAN IDENTIFIER:name							{: RESULT = new FormalArg(new BoolAstType(), name, nameleft); :}
		| COMMA INT IDENTIFIER:name								{: RESULT = new FormalArg(new IntAstType(), name, nameleft); :}
		| COMMA IDENTIFIER:type IDENTIFIER:name							{: RESULT = new FormalArg(new RefType(type), name, nameleft); :}
;

varDecl ::= INT LBRACKET RBRACKET IDENTIFIER:name SEMICOLON {: RESULT = new VarDecl(new IntArrayAstType(), name, nameleft);	:}
		| BOOLEAN IDENTIFIER:name SEMICOLON					{: RESULT = new VarDecl(new BoolAstType(), name, nameleft);	:}
		| INT IDENTIFIER:name SEMICOLON						{: RESULT = new VarDecl(new IntAstType(), name, nameleft); :}
		| IDENTIFIER:type IDENTIFIER:name SEMICOLON					{: RESULT = new VarDecl(new RefType(type), name, nameleft); :}
;

statement ::= LBRACE statements:sl RBRACE			{: RESULT = new BlockStatement(sl); :}
		| PRINT:p LPAREN expr:e RPAREN SEMICOLON	{: RESULT = new SysoutStatement(e); :}
		| IDENTIFIER:rv EQUAL:eq expr:lv SEMICOLON 			{: RESULT = new AssignStatement(rv, lv); :}
		| WHILE LPAREN expr:e RPAREN statement:body {: RESULT = new WhileStatement(e, body); :}
		| IF LPAREN expr:e RPAREN statement:true_statement ELSE statement:false_statement
				{: RESULT = new IfStatement(e, true_statement, false_statement); :}
		| IDENTIFIER:array LBRACKET expr:index RBRACKET EQUAL:eq expr:lv SEMICOLON
				{: RESULT = new AssignArrayStatement(array, index, lv); :}
;

expr ::= expr:lv PLUS:op expr:rv						{: RESULT = new AddExpr(lv, rv); :}
		| expr:lv MINUS:op expr:rv						{: RESULT = new SubtractExpr(lv, rv); :}
		| expr:lv MULT:op expr:rv						{: RESULT = new MultExpr(lv, rv); :}
		| expr:lv AND:op expr:rv						{: RESULT = new AndExpr(lv, rv); :}
		| expr:lv LESSTHAN:op expr:rv					{: RESULT = new LtExpr(lv, rv); :}
		| expr:lv LBRACKET:op expr:index RBRACKET		{: RESULT = new ArrayAccessExpr(lv, index); :}
		| expr:lv DOT LENGTH							{: RESULT = new ArrayLengthExpr(lv); :}
		| expr:lv DOT IDENTIFIER:func LPAREN actuals:es RPAREN	{: RESULT = new MethodCallExpr(lv, func, es); :}
		| INTEGER_LITERAL:i									{: RESULT = new IntegerLiteralExpr(i.intValue()); :}
		| TRUE											{: RESULT = new TrueExpr(); :}
		| FALSE											{: RESULT = new FalseExpr(); :}
		| IDENTIFIER:name										{: RESULT = new IdentifierExpr(name); :}
		| THIS											{: RESULT = new ThisExpr(); :}
		| NEW INT LBRACKET expr:size RBRACKET			{: RESULT = new NewIntArrayExpr(size); :}
		| NEW IDENTIFIER:type LPAREN RPAREN						{: RESULT = new NewObjectExpr(type); :}
		| NOT expr:e									{: RESULT = new NotExpr(e); :}
		| LPAREN expr:e RPAREN							{: RESULT = e; :}
;

/* List rules */
classDecls ::= classDecls:cs classDecl:c
						{: if(cs == null) cs = new LinkedList<ClassDecl>(); cs.add(c); RESULT = cs; :}
		| /* empty */	{: RESULT = new LinkedList<ClassDecl>(); :}
;

methodDecls ::= methodDecls:ms methodDecl:m
						{: if(ms == null) ms = new LinkedList<MethodDecl>(); ms.add(m); RESULT = ms; :}
		| /* empty */	{: RESULT = new LinkedList<MethodDecl>(); :}
;

formalArgs ::= INT LBRACKET RBRACKET IDENTIFIER:name commaFormalArgs:fs
			{: if(fs == null) fs = new LinkedList<FormalArg>(); fs.addFirst(new FormalArg(new IntArrayAstType(), name, nameleft)); RESULT = fs; :}
		| BOOLEAN IDENTIFIER:name commaFormalArgs:fs
			{: if(fs == null) fs = new LinkedList<FormalArg>(); fs.addFirst(new FormalArg(new BoolAstType(), name, nameleft)); RESULT = fs; :}
		| INT IDENTIFIER:name commaFormalArgs:fs
			{: if(fs == null) fs = new LinkedList<FormalArg>(); fs.addFirst(new FormalArg(new IntAstType(), name, nameleft)); RESULT = fs; :}
		| IDENTIFIER:type IDENTIFIER:name commaFormalArgs:fs
			{: if(fs == null) fs = new LinkedList<FormalArg>(); fs.addFirst(new FormalArg(new RefType(type), name, nameleft)); RESULT = fs; :}
		| /* empty */
			{: RESULT = new LinkedList<FormalArg>(); :}
;

commaFormalArgs ::= commaFormalArgs:fs commaFormalArg:f
						{: if(fs == null) fs = new LinkedList<FormalArg>(); fs.add(f); RESULT = fs; :}
		| /* empty */	{: RESULT = new LinkedList<FormalArg>(); :}
;

varDecls ::= varDecls:vs varDecl:v	{: if(vs == null) vs = new LinkedList<VarDecl>(); vs.add(v); RESULT = vs; :}
		| /* empty */				{: RESULT = new LinkedList<VarDecl>(); :}
;

actuals ::= expr:a commaActuals:as {: if(as == null) as = new LinkedList<Expr>(); as.addFirst(a); RESULT = as; :}
		| /* empty */				 {: RESULT = new LinkedList<Expr>(); :}
;

commaActuals ::= commaActuals:as COMMA expr:a {: if(as == null) as = new LinkedList<Expr>(); as.add(a); RESULT = as; :}
		| /* empty */
;

statements ::= statement:s statements:sl
						{: if(sl == null) sl = new LinkedList<Statement>(); sl.addFirst(s); RESULT = sl; :}
		| /* empty */	{: RESULT = new LinkedList<Statement>(); :}
;
